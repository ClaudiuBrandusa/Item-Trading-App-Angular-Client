{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/Angular/Item-Trading-App-Angular-Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"../modules/identity/services/refresh-token.service\";\nexport class AuthGuardService {\n  constructor(router, jwtHelper, refreshTokenService) {\n    this.router = router;\n    this.jwtHelper = jwtHelper;\n    this.refreshTokenService = refreshTokenService;\n  }\n\n  canActivate() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = localStorage.getItem(\"token\");\n\n      if (token && !_this.jwtHelper.isTokenExpired(token)) {\n        return true;\n      }\n\n      if (_this.refreshTokenService.canRefreshTokens()) {\n        yield _this.refreshTokenService.refreshTokens();\n        if (_this.refreshTokenService.isLoggedIn) return true;\n      }\n\n      _this.router.navigate([\"login\"]);\n\n      return false;\n    })();\n  }\n\n}\n\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || AuthGuardService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.RefreshTokenService));\n};\n\nAuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuardService,\n  factory: AuthGuardService.ɵfac\n});","map":{"version":3,"sources":["D:/Workspace/Angular/Item-Trading-App-Angular-Client/src/app/guards/auth-guard.service.ts"],"names":["i0","i1","i2","i3","AuthGuardService","constructor","router","jwtHelper","refreshTokenService","canActivate","token","localStorage","getItem","isTokenExpired","canRefreshTokens","refreshTokens","isLoggedIn","navigate","ɵfac","AuthGuardService_Factory","t","ɵɵinject","Router","JwtHelperService","RefreshTokenService","ɵprov","ɵɵdefineInjectable","factory"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oDAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoBC,mBAApB,EAAyC;AAChD,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACH;;AACKC,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIF,KAAK,IAAI,CAAC,KAAI,CAACH,SAAL,CAAeM,cAAf,CAA8BH,KAA9B,CAAd,EAAoD;AAChD,eAAO,IAAP;AACH;;AACD,UAAI,KAAI,CAACF,mBAAL,CAAyBM,gBAAzB,EAAJ,EAAiD;AAC7C,cAAM,KAAI,CAACN,mBAAL,CAAyBO,aAAzB,EAAN;AACA,YAAI,KAAI,CAACP,mBAAL,CAAyBQ,UAA7B,EACI,OAAO,IAAP;AACP;;AACD,MAAA,KAAI,CAACV,MAAL,CAAYW,QAAZ,CAAqB,CAAC,OAAD,CAArB;;AACA,aAAO,KAAP;AAXgB;AAYnB;;AAlByB;;AAoB9Bb,gBAAgB,CAACc,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIhB,gBAAV,EAA4BJ,EAAE,CAACqB,QAAH,CAAYpB,EAAE,CAACqB,MAAf,CAA5B,EAAoDtB,EAAE,CAACqB,QAAH,CAAYnB,EAAE,CAACqB,gBAAf,CAApD,EAAsFvB,EAAE,CAACqB,QAAH,CAAYlB,EAAE,CAACqB,mBAAf,CAAtF,CAAP;AAAoI,CAAnM;;AACApB,gBAAgB,CAACqB,KAAjB,GAAyB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEhB,EAAAA,KAAK,EAAEN,gBAAT;AAA2BuB,EAAAA,OAAO,EAAEvB,gBAAgB,CAACc;AAArD,CAAtB,CAAvC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"@auth0/angular-jwt\";\r\nimport * as i3 from \"../modules/identity/services/refresh-token.service\";\r\nexport class AuthGuardService {\r\n    constructor(router, jwtHelper, refreshTokenService) {\r\n        this.router = router;\r\n        this.jwtHelper = jwtHelper;\r\n        this.refreshTokenService = refreshTokenService;\r\n    }\r\n    async canActivate() {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token && !this.jwtHelper.isTokenExpired(token)) {\r\n            return true;\r\n        }\r\n        if (this.refreshTokenService.canRefreshTokens()) {\r\n            await this.refreshTokenService.refreshTokens();\r\n            if (this.refreshTokenService.isLoggedIn)\r\n                return true;\r\n        }\r\n        this.router.navigate([\"login\"]);\r\n        return false;\r\n    }\r\n}\r\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) { return new (t || AuthGuardService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.RefreshTokenService)); };\r\nAuthGuardService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuardService, factory: AuthGuardService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}