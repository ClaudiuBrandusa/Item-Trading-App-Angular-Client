{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/Angular/Item-Trading-App-Angular-Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventData } from 'src/app/models/utils/event';\nimport { NetworkService } from '../../shared/services/network.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/services/config.service\";\nimport * as i3 from \"../../shared/services/event-bus.service\";\nexport class IdentityService extends NetworkService {\n  constructor(http, configService, injector, eventBus) {\n    super(http, configService, injector, eventBus);\n    this.http = http;\n    this.configService = configService;\n    this.injector = injector;\n    this.eventBus = eventBus;\n  }\n\n  setTokens(response) {\n    this.clearTokens();\n    var somethingWentWrong = false;\n\n    if (response.hasOwnProperty(\"token\")) {\n      localStorage.setItem(\"token\", response.token);\n    } else {\n      somethingWentWrong = true;\n    }\n\n    if (response.hasOwnProperty(\"refreshToken\")) {\n      localStorage.setItem(\"refreshToken\", response.refreshToken);\n    } else {\n      somethingWentWrong = true;\n    }\n\n    this.eventBus.emit(new EventData(\"silentRefresh\", null));\n    return !somethingWentWrong;\n  }\n\n  clearTokens() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"refreshToken\");\n  }\n\n  SetEndpointsModel() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.endpointsModel = yield _this.endpointsService.GetIdentity();\n    })();\n  }\n\n}\n\nIdentityService.ɵfac = function IdentityService_Factory(t) {\n  return new (t || IdentityService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService));\n};\n\nIdentityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IdentityService,\n  factory: IdentityService.ɵfac\n});","map":{"version":3,"sources":["D:/Workspace/Angular/Item-Trading-App-Angular-Client/src/app/modules/identity/services/identity.service.ts"],"names":["EventData","NetworkService","i0","i1","i2","i3","IdentityService","constructor","http","configService","injector","eventBus","setTokens","response","clearTokens","somethingWentWrong","hasOwnProperty","localStorage","setItem","token","refreshToken","emit","removeItem","SetEndpointsModel","endpointsModel","endpointsService","GetIdentity","ɵfac","IdentityService_Factory","t","ɵɵinject","HttpClient","ConfigService","Injector","EventBusService","ɵprov","ɵɵdefineInjectable","factory"],"mappings":";AAAA,SAASA,SAAT,QAA0B,4BAA1B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,yCAApB;AACA,OAAO,MAAMC,eAAN,SAA8BL,cAA9B,CAA6C;AAChDM,EAAAA,WAAW,CAACC,IAAD,EAAOC,aAAP,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AACjD,UAAMH,IAAN,EAAYC,aAAZ,EAA2BC,QAA3B,EAAqCC,QAArC;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,SAAKC,WAAL;AACA,QAAIC,kBAAkB,GAAG,KAAzB;;AACA,QAAIF,QAAQ,CAACG,cAAT,CAAwB,OAAxB,CAAJ,EAAsC;AAClCC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,QAAQ,CAACM,KAAvC;AACH,KAFD,MAGK;AACDJ,MAAAA,kBAAkB,GAAG,IAArB;AACH;;AACD,QAAIF,QAAQ,CAACG,cAAT,CAAwB,cAAxB,CAAJ,EAA6C;AACzCC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACO,YAA9C;AACH,KAFD,MAGK;AACDL,MAAAA,kBAAkB,GAAG,IAArB;AACH;;AACD,SAAKJ,QAAL,CAAcU,IAAd,CAAmB,IAAIrB,SAAJ,CAAc,eAAd,EAA+B,IAA/B,CAAnB;AACA,WAAO,CAACe,kBAAR;AACH;;AACDD,EAAAA,WAAW,GAAG;AACVG,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACAL,IAAAA,YAAY,CAACK,UAAb,CAAwB,cAAxB;AACH;;AACKC,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,MAAA,KAAI,CAACC,cAAL,SAA4B,KAAI,CAACC,gBAAL,CAAsBC,WAAtB,EAA5B;AADsB;AAEzB;;AAhC+C;;AAkCpDpB,eAAe,CAACqB,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIvB,eAAV,EAA2BJ,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,UAAf,CAA3B,EAAuD7B,EAAE,CAAC4B,QAAH,CAAY1B,EAAE,CAAC4B,aAAf,CAAvD,EAAsF9B,EAAE,CAAC4B,QAAH,CAAY5B,EAAE,CAAC+B,QAAf,CAAtF,EAAgH/B,EAAE,CAAC4B,QAAH,CAAYzB,EAAE,CAAC6B,eAAf,CAAhH,CAAP;AAA0J,CAAvN;;AACA5B,eAAe,CAAC6B,KAAhB,GAAwB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;AAAEjB,EAAAA,KAAK,EAAEb,eAAT;AAA0B+B,EAAAA,OAAO,EAAE/B,eAAe,CAACqB;AAAnD,CAAtB,CAAtC","sourcesContent":["import { EventData } from 'src/app/models/utils/event';\r\nimport { NetworkService } from '../../shared/services/network.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../../shared/services/config.service\";\r\nimport * as i3 from \"../../shared/services/event-bus.service\";\r\nexport class IdentityService extends NetworkService {\r\n    constructor(http, configService, injector, eventBus) {\r\n        super(http, configService, injector, eventBus);\r\n        this.http = http;\r\n        this.configService = configService;\r\n        this.injector = injector;\r\n        this.eventBus = eventBus;\r\n    }\r\n    setTokens(response) {\r\n        this.clearTokens();\r\n        var somethingWentWrong = false;\r\n        if (response.hasOwnProperty(\"token\")) {\r\n            localStorage.setItem(\"token\", response.token);\r\n        }\r\n        else {\r\n            somethingWentWrong = true;\r\n        }\r\n        if (response.hasOwnProperty(\"refreshToken\")) {\r\n            localStorage.setItem(\"refreshToken\", response.refreshToken);\r\n        }\r\n        else {\r\n            somethingWentWrong = true;\r\n        }\r\n        this.eventBus.emit(new EventData(\"silentRefresh\", null));\r\n        return !somethingWentWrong;\r\n    }\r\n    clearTokens() {\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"refreshToken\");\r\n    }\r\n    async SetEndpointsModel() {\r\n        this.endpointsModel = await this.endpointsService.GetIdentity();\r\n    }\r\n}\r\nIdentityService.ɵfac = function IdentityService_Factory(t) { return new (t || IdentityService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService)); };\r\nIdentityService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: IdentityService, factory: IdentityService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}