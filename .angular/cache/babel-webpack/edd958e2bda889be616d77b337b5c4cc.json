{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/Angular/Item-Trading-App-Angular-Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ConfigFileState } from 'src/app/models/enums/config-file-state';\nimport { Interval } from 'src/app/models/utils/async-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.state = ConfigFileState.Sleeping;\n  }\n\n  load() {\n    this.state = ConfigFileState.Loading;\n    this.http.get('./assets/application-config.json').subscribe(response => {\n      this.app_config = response;\n      this.state = ConfigFileState.Loaded;\n    });\n    return new Promise(resolve => resolve());\n  }\n\n  loadOptions(objectName) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (objectName == null) return null;\n\n      if (_this.IsSleeping()) {\n        yield _this.load();\n      }\n\n      if (_this.IsLoading()) {\n        yield Interval(() => _this.IsLoading(), 100, 5000);\n      }\n\n      if (_this.AppConfig) {\n        return _this.GetObjectFromPath(objectName);\n      }\n\n      return null;\n    })();\n  }\n\n  get AppConfig() {\n    return this.app_config;\n  } // service state\n\n\n  IsSleeping() {\n    return this.state == ConfigFileState.Sleeping;\n  }\n\n  IsLoading() {\n    return this.state == ConfigFileState.Loading;\n  }\n\n  IsLoaded() {\n    return this.state == ConfigFileState.Loaded;\n  }\n\n  SplitObjectName(objectName) {\n    return objectName.split(\":\");\n  }\n\n  GetObjectFromPath(objectName) {\n    let path = this.SplitObjectName(objectName);\n    let tmp = this.AppConfig;\n    path.forEach(element => {\n      if (tmp.hasOwnProperty(element)) {\n        tmp = tmp[element];\n      }\n    });\n    return tmp;\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac\n});","map":{"version":3,"sources":["D:/Workspace/Angular/Item-Trading-App-Angular-Client/src/app/modules/shared/services/config.service.ts"],"names":["ConfigFileState","Interval","i0","i1","ConfigService","constructor","http","state","Sleeping","load","Loading","get","subscribe","response","app_config","Loaded","Promise","resolve","loadOptions","objectName","IsSleeping","IsLoading","AppConfig","GetObjectFromPath","IsLoaded","SplitObjectName","split","path","tmp","forEach","element","hasOwnProperty","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,eAAT,QAAgC,wCAAhC;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaP,eAAe,CAACQ,QAA7B;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAKF,KAAL,GAAaP,eAAe,CAACU,OAA7B;AACA,SAAKJ,IAAL,CAAUK,GAAV,CAAc,kCAAd,EACKC,SADL,CACeC,QAAQ,IAAI;AACvB,WAAKC,UAAL,GAAkBD,QAAlB;AACA,WAAKN,KAAL,GAAaP,eAAe,CAACe,MAA7B;AACH,KAJD;AAKA,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,EAAhC,CAAP;AACH;;AACKC,EAAAA,WAAW,CAACC,UAAD,EAAa;AAAA;;AAAA;AAC1B,UAAIA,UAAU,IAAI,IAAlB,EACI,OAAO,IAAP;;AACJ,UAAI,KAAI,CAACC,UAAL,EAAJ,EAAuB;AACnB,cAAM,KAAI,CAACX,IAAL,EAAN;AACH;;AACD,UAAI,KAAI,CAACY,SAAL,EAAJ,EAAsB;AAClB,cAAMpB,QAAQ,CAAC,MAAM,KAAI,CAACoB,SAAL,EAAP,EAAyB,GAAzB,EAA8B,IAA9B,CAAd;AACH;;AACD,UAAI,KAAI,CAACC,SAAT,EAAoB;AAChB,eAAO,KAAI,CAACC,iBAAL,CAAuBJ,UAAvB,CAAP;AACH;;AACD,aAAO,IAAP;AAZ0B;AAa7B;;AACY,MAATG,SAAS,GAAG;AACZ,WAAO,KAAKR,UAAZ;AACH,GA9BsB,CA+BvB;;;AACAM,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKb,KAAL,IAAcP,eAAe,CAACQ,QAArC;AACH;;AACDa,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKd,KAAL,IAAcP,eAAe,CAACU,OAArC;AACH;;AACDc,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKjB,KAAL,IAAcP,eAAe,CAACe,MAArC;AACH;;AACDU,EAAAA,eAAe,CAACN,UAAD,EAAa;AACxB,WAAOA,UAAU,CAACO,KAAX,CAAiB,GAAjB,CAAP;AACH;;AACDH,EAAAA,iBAAiB,CAACJ,UAAD,EAAa;AAC1B,QAAIQ,IAAI,GAAG,KAAKF,eAAL,CAAqBN,UAArB,CAAX;AACA,QAAIS,GAAG,GAAG,KAAKN,SAAf;AACAK,IAAAA,IAAI,CAACE,OAAL,CAAcC,OAAD,IAAa;AACtB,UAAIF,GAAG,CAACG,cAAJ,CAAmBD,OAAnB,CAAJ,EAAiC;AAC7BF,QAAAA,GAAG,GAAGA,GAAG,CAACE,OAAD,CAAT;AACH;AACJ,KAJD;AAKA,WAAOF,GAAP;AACH;;AArDsB;;AAuD3BxB,aAAa,CAAC4B,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI9B,aAAV,EAAyBF,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACiC,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAhC,aAAa,CAACiC,KAAd,GAAsB,aAAcnC,EAAE,CAACoC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEnC,aAAT;AAAwBoC,EAAAA,OAAO,EAAEpC,aAAa,CAAC4B;AAA/C,CAAtB,CAApC","sourcesContent":["import { ConfigFileState } from 'src/app/models/enums/config-file-state';\r\nimport { Interval } from 'src/app/models/utils/async-utils';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.state = ConfigFileState.Sleeping;\r\n    }\r\n    load() {\r\n        this.state = ConfigFileState.Loading;\r\n        this.http.get('./assets/application-config.json')\r\n            .subscribe(response => {\r\n            this.app_config = response;\r\n            this.state = ConfigFileState.Loaded;\r\n        });\r\n        return new Promise((resolve) => resolve());\r\n    }\r\n    async loadOptions(objectName) {\r\n        if (objectName == null)\r\n            return null;\r\n        if (this.IsSleeping()) {\r\n            await this.load();\r\n        }\r\n        if (this.IsLoading()) {\r\n            await Interval(() => this.IsLoading(), 100, 5000);\r\n        }\r\n        if (this.AppConfig) {\r\n            return this.GetObjectFromPath(objectName);\r\n        }\r\n        return null;\r\n    }\r\n    get AppConfig() {\r\n        return this.app_config;\r\n    }\r\n    // service state\r\n    IsSleeping() {\r\n        return this.state == ConfigFileState.Sleeping;\r\n    }\r\n    IsLoading() {\r\n        return this.state == ConfigFileState.Loading;\r\n    }\r\n    IsLoaded() {\r\n        return this.state == ConfigFileState.Loaded;\r\n    }\r\n    SplitObjectName(objectName) {\r\n        return objectName.split(\":\");\r\n    }\r\n    GetObjectFromPath(objectName) {\r\n        let path = this.SplitObjectName(objectName);\r\n        let tmp = this.AppConfig;\r\n        path.forEach((element) => {\r\n            if (tmp.hasOwnProperty(element)) {\r\n                tmp = tmp[element];\r\n            }\r\n        });\r\n        return tmp;\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}