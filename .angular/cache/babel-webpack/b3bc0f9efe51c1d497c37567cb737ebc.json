{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/Angular/Item-Trading-App-Angular-Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { LoginRequest } from 'src/app/models/request/identity/loginRequest.model';\nimport { IdentityService } from './identity.service';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/services/config.service\";\nimport * as i3 from \"../../shared/services/event-bus.service\";\nexport class LoginService extends IdentityService {\n  constructor(http, configService, injector, eventBus) {\n    super(http, configService, injector, eventBus);\n    this.http = http;\n    this.configService = configService;\n    this.injector = injector;\n    this.eventBus = eventBus;\n    this.login_path = \"\";\n  }\n\n  login(form) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let model = _this.form2LoginRequest(form);\n\n      yield _this.WaitUntilIsLoaded();\n\n      _this.http.post(_this.login_path, model).subscribe(response => {\n        if (_this.setTokens(response)) {\n          let router = _this.injector.get(Router);\n\n          router.navigate([\"\"]);\n        }\n      }, err => {});\n    })();\n  }\n\n  form2LoginRequest(form) {\n    var model = new LoginRequest();\n    model.username = form.get('username').value;\n    model.password = form.get('password').value;\n    return model;\n  }\n\n  LoadEndpoints() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.WaitUntilIsLoaded(); // if it's still not loaded\n\n      if (_this2.endpointsModel == null) return; // then something went wrong\n\n      _this2.login_path = _this2.base_path + _this2.endpointsModel.login;\n    })();\n  }\n\n}\n\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService));\n};\n\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac\n});","map":{"version":3,"sources":["D:/Workspace/Angular/Item-Trading-App-Angular-Client/src/app/modules/identity/services/login.service.ts"],"names":["LoginRequest","IdentityService","Router","i0","i1","i2","i3","LoginService","constructor","http","configService","injector","eventBus","login_path","login","form","model","form2LoginRequest","WaitUntilIsLoaded","post","subscribe","response","setTokens","router","get","navigate","err","username","value","password","LoadEndpoints","endpointsModel","base_path","ɵfac","LoginService_Factory","t","ɵɵinject","HttpClient","ConfigService","Injector","EventBusService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,YAAT,QAA6B,oDAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,yCAApB;AACA,OAAO,MAAMC,YAAN,SAA2BN,eAA3B,CAA2C;AAC9CO,EAAAA,WAAW,CAACC,IAAD,EAAOC,aAAP,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AACjD,UAAMH,IAAN,EAAYC,aAAZ,EAA2BC,QAA3B,EAAqCC,QAArC;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;;AACKC,EAAAA,KAAK,CAACC,IAAD,EAAO;AAAA;;AAAA;AACd,UAAIC,KAAK,GAAG,KAAI,CAACC,iBAAL,CAAuBF,IAAvB,CAAZ;;AACA,YAAM,KAAI,CAACG,iBAAL,EAAN;;AACA,MAAA,KAAI,CAACT,IAAL,CAAUU,IAAV,CAAe,KAAI,CAACN,UAApB,EAAgCG,KAAhC,EAAuCI,SAAvC,CAAiDC,QAAQ,IAAI;AACzD,YAAI,KAAI,CAACC,SAAL,CAAeD,QAAf,CAAJ,EAA8B;AAC1B,cAAIE,MAAM,GAAG,KAAI,CAACZ,QAAL,CAAca,GAAd,CAAkBtB,MAAlB,CAAb;;AACAqB,UAAAA,MAAM,CAACE,QAAP,CAAgB,CAAC,EAAD,CAAhB;AACH;AACJ,OALD,EAKGC,GAAG,IAAI,CAAG,CALb;AAHc;AASjB;;AACDT,EAAAA,iBAAiB,CAACF,IAAD,EAAO;AACpB,QAAIC,KAAK,GAAG,IAAIhB,YAAJ,EAAZ;AACAgB,IAAAA,KAAK,CAACW,QAAN,GAAiBZ,IAAI,CAACS,GAAL,CAAS,UAAT,EAAqBI,KAAtC;AACAZ,IAAAA,KAAK,CAACa,QAAN,GAAiBd,IAAI,CAACS,GAAL,CAAS,UAAT,EAAqBI,KAAtC;AACA,WAAOZ,KAAP;AACH;;AACKc,EAAAA,aAAa,GAAG;AAAA;;AAAA;AAClB,YAAM,MAAI,CAACZ,iBAAL,EAAN,CADkB,CAElB;;AACA,UAAI,MAAI,CAACa,cAAL,IAAuB,IAA3B,EACI,OAJc,CAIN;;AACZ,MAAA,MAAI,CAAClB,UAAL,GAAkB,MAAI,CAACmB,SAAL,GAAiB,MAAI,CAACD,cAAL,CAAoBjB,KAAvD;AALkB;AAMrB;;AA/B6C;;AAiClDP,YAAY,CAAC0B,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAI5B,YAAV,EAAwBJ,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACiC,UAAf,CAAxB,EAAoDlC,EAAE,CAACiC,QAAH,CAAY/B,EAAE,CAACiC,aAAf,CAApD,EAAmFnC,EAAE,CAACiC,QAAH,CAAYjC,EAAE,CAACoC,QAAf,CAAnF,EAA6GpC,EAAE,CAACiC,QAAH,CAAY9B,EAAE,CAACkC,eAAf,CAA7G,CAAP;AAAuJ,CAA9M;;AACAjC,YAAY,CAACkC,KAAb,GAAqB,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEpC,YAAT;AAAuBqC,EAAAA,OAAO,EAAErC,YAAY,CAAC0B;AAA7C,CAAtB,CAAnC","sourcesContent":["import { LoginRequest } from 'src/app/models/request/identity/loginRequest.model';\r\nimport { IdentityService } from './identity.service';\r\nimport { Router } from '@angular/router';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../../shared/services/config.service\";\r\nimport * as i3 from \"../../shared/services/event-bus.service\";\r\nexport class LoginService extends IdentityService {\r\n    constructor(http, configService, injector, eventBus) {\r\n        super(http, configService, injector, eventBus);\r\n        this.http = http;\r\n        this.configService = configService;\r\n        this.injector = injector;\r\n        this.eventBus = eventBus;\r\n        this.login_path = \"\";\r\n    }\r\n    async login(form) {\r\n        let model = this.form2LoginRequest(form);\r\n        await this.WaitUntilIsLoaded();\r\n        this.http.post(this.login_path, model).subscribe(response => {\r\n            if (this.setTokens(response)) {\r\n                let router = this.injector.get(Router);\r\n                router.navigate([\"\"]);\r\n            }\r\n        }, err => { });\r\n    }\r\n    form2LoginRequest(form) {\r\n        var model = new LoginRequest();\r\n        model.username = form.get('username').value;\r\n        model.password = form.get('password').value;\r\n        return model;\r\n    }\r\n    async LoadEndpoints() {\r\n        await this.WaitUntilIsLoaded();\r\n        // if it's still not loaded\r\n        if (this.endpointsModel == null)\r\n            return; // then something went wrong\r\n        this.login_path = this.base_path + this.endpointsModel.login;\r\n    }\r\n}\r\nLoginService.ɵfac = function LoginService_Factory(t) { return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService)); };\r\nLoginService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LoginService, factory: LoginService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}