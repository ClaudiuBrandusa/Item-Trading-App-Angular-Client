{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/Angular/Item-Trading-App-Angular-Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Router } from '@angular/router';\nimport { RegisterRequest } from 'src/app/models/request/identity/registerRequest.model';\nimport { IdentityService } from './identity.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/services/config.service\";\nimport * as i3 from \"../../shared/services/event-bus.service\";\nexport class RegisterService extends IdentityService {\n  constructor(http, configService, injector, eventBus) {\n    super(http, configService, injector, eventBus);\n    this.http = http;\n    this.configService = configService;\n    this.injector = injector;\n    this.eventBus = eventBus;\n    this.register_path = \"\";\n  }\n\n  register(form) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let model = _this.form2RegisterRequest(form);\n\n      yield _this.WaitUntilIsLoaded();\n\n      _this.http.post(_this.register_path, model).subscribe(response => {\n        if (_this.setTokens(response)) {\n          let router = _this.injector.get(Router);\n\n          router.navigate([\"\"]);\n        }\n      }, err => {// something went wrong\n      });\n    })();\n  }\n\n  form2RegisterRequest(form) {\n    var model = new RegisterRequest();\n    model.username = form.get('username').value;\n    model.email = form.get('email').value;\n    model.password = form.get('password').value;\n    model.confirmPassword = form.get('confirm_password').value;\n    return model;\n  }\n\n  LoadEndpoints() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.WaitUntilIsLoaded();\n      if (_this2.endpointsModel == null) return;\n      _this2.register_path = _this2.base_path + _this2.endpointsModel.register;\n    })();\n  }\n\n}\n\nRegisterService.ɵfac = function RegisterService_Factory(t) {\n  return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService));\n};\n\nRegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegisterService,\n  factory: RegisterService.ɵfac\n});","map":{"version":3,"sources":["D:/Workspace/Angular/Item-Trading-App-Angular-Client/src/app/modules/identity/services/register.service.ts"],"names":["Router","RegisterRequest","IdentityService","i0","i1","i2","i3","RegisterService","constructor","http","configService","injector","eventBus","register_path","register","form","model","form2RegisterRequest","WaitUntilIsLoaded","post","subscribe","response","setTokens","router","get","navigate","err","username","value","email","password","confirmPassword","LoadEndpoints","endpointsModel","base_path","ɵfac","RegisterService_Factory","t","ɵɵinject","HttpClient","ConfigService","Injector","EventBusService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { Router } from '@angular/router';\r\nimport { RegisterRequest } from 'src/app/models/request/identity/registerRequest.model';\r\nimport { IdentityService } from './identity.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../../shared/services/config.service\";\r\nimport * as i3 from \"../../shared/services/event-bus.service\";\r\nexport class RegisterService extends IdentityService {\r\n    constructor(http, configService, injector, eventBus) {\r\n        super(http, configService, injector, eventBus);\r\n        this.http = http;\r\n        this.configService = configService;\r\n        this.injector = injector;\r\n        this.eventBus = eventBus;\r\n        this.register_path = \"\";\r\n    }\r\n    async register(form) {\r\n        let model = this.form2RegisterRequest(form);\r\n        await this.WaitUntilIsLoaded();\r\n        this.http.post(this.register_path, model).subscribe(response => {\r\n            if (this.setTokens(response)) {\r\n                let router = this.injector.get(Router);\r\n                router.navigate([\"\"]);\r\n            }\r\n        }, err => {\r\n            // something went wrong\r\n        });\r\n    }\r\n    form2RegisterRequest(form) {\r\n        var model = new RegisterRequest();\r\n        model.username = form.get('username').value;\r\n        model.email = form.get('email').value;\r\n        model.password = form.get('password').value;\r\n        model.confirmPassword = form.get('confirm_password').value;\r\n        return model;\r\n    }\r\n    async LoadEndpoints() {\r\n        await this.WaitUntilIsLoaded();\r\n        if (this.endpointsModel == null)\r\n            return;\r\n        this.register_path = this.base_path + this.endpointsModel.register;\r\n    }\r\n}\r\nRegisterService.ɵfac = function RegisterService_Factory(t) { return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService)); };\r\nRegisterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RegisterService, factory: RegisterService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}