{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/Angular/Item-Trading-App-Angular-Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { interval } from 'rxjs';\nimport { RefreshTokenRequest } from 'src/app/models/request/identity/refresh-token-request.model';\nimport { Interval } from 'src/app/models/utils/async-utils';\nimport { EventData } from 'src/app/models/utils/event';\nimport { IdentityService } from './identity.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/services/config.service\";\nimport * as i3 from \"../../shared/services/event-bus.service\";\nimport * as i4 from \"@angular/router\";\nexport class RefreshTokenService extends IdentityService {\n  constructor(http, configService, injector, eventBus, router, eventBusService) {\n    super(http, configService, injector, eventBus);\n    this.http = http;\n    this.configService = configService;\n    this.injector = injector;\n    this.eventBus = eventBus;\n    this.router = router;\n    this.eventBusService = eventBusService;\n    this.options = null;\n    this.refresh_path = this.base_path + \"refresh\";\n    this.InitOptions();\n    this.initBackgroundEventBusSubscription();\n  }\n\n  ngOnInit() {\n    this.initEventBusSubscription();\n  }\n\n  ngOnDestroy() {\n    this.clearEventBusSubscription();\n  }\n\n  getToken() {\n    var result = localStorage.getItem(\"token\");\n    return result === null ? \"\" : result.toString();\n  }\n\n  getRefreshToken() {\n    var result = localStorage.getItem(\"refreshToken\");\n    return result === null ? \"\" : result.toString();\n  }\n\n  getRefreshTokenRequest() {\n    var request = new RefreshTokenRequest();\n    request.token = this.getToken();\n    request.refreshToken = this.getRefreshToken();\n    return request;\n  }\n\n  updateToken(token) {\n    localStorage.setItem(\"token\", token);\n  }\n\n  updateRefreshToken(refreshToken) {\n    localStorage.setItem(\"refreshToken\", refreshToken);\n  }\n\n  canRefreshTokens() {\n    // if we have token and refresh token then it means that we have the necessarily data for token refresh\n    return this.getToken() !== \"\" && this.getRefreshToken() !== \"\";\n  }\n\n  getRefreshTokensRequest() {\n    if (!this.loaded) return null; // won't happen if we are not trying to refresh the token in the first milliseconds from creating the component\n\n    return this.http.post(this.refresh_path, this.getRefreshTokenRequest());\n  }\n\n  refreshTokens() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.canRefreshTokens()) {\n        let result;\n        yield Interval(() => {\n          result = _this.getRefreshTokensRequest();\n          return result == null; // we will continue until we get a non null result\n        }, 100, 4000);\n\n        if (result == null) {\n          return;\n        }\n\n        result.subscribe(result => {\n          _this.setTokens(result);\n        }, err => {\n          _this.eventBusService.emit(new EventData(\"logout\", null));\n        });\n      }\n    })();\n  }\n\n  isLoggedIn() {\n    return this.canRefreshTokens();\n  }\n\n  signOut() {\n    localStorage.clear();\n    this.router.navigate(['login']);\n  } // subscriptions could be triggered even if the service is destroyed\n\n\n  initBackgroundEventBusSubscription() {\n    this.eventBusSignOutSub = this.eventBusService.on('logout', () => {\n      this.signOut();\n      this.endSilentRefresh();\n    });\n  }\n\n  initEventBusSubscription() {\n    var _this2 = this;\n\n    this.eventBusSilentRefreshSub = this.eventBusService.on('silentRefresh', /*#__PURE__*/_asyncToGenerator(function* () {\n      _this2.startSilentRefresh();\n    }));\n  }\n\n  clearEventBusSubscription() {\n    if (this.eventBusSilentRefreshSub) {\n      this.eventBusSilentRefreshSub.unsubscribe();\n    }\n\n    this.endSilentRefresh();\n  }\n\n  startSilentRefresh() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.options == null) {\n        yield _this3.GetOptions();\n\n        if (_this3.options == null) {\n          return;\n        }\n      }\n\n      _this3.silentRefresh = interval(_this3.options.silentRefreshIntervalInSeconds * 1000).subscribe(() => {\n        _this3.refreshTokens();\n      });\n    })();\n  }\n\n  endSilentRefresh() {\n    if (this.silentRefresh) {\n      this.silentRefresh.unsubscribe();\n    }\n  }\n\n  InitOptions() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.options = yield _this4.configService.loadOptions(\"refreshTokenOptions\");\n    })();\n  }\n\n  GetOptions() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.options == null) {\n        yield Interval(() => _this5.options == null, 50, 5000);\n      }\n\n      return _this5.options;\n    })();\n  }\n\n  LoadEndpoints() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.WaitUntilIsLoaded();\n      if (_this6.endpointsModel == null) return;\n      _this6.refresh_path = _this6.base_path + _this6.endpointsModel.refresh;\n    })();\n  }\n\n}\n\nRefreshTokenService.ɵfac = function RefreshTokenService_Factory(t) {\n  return new (t || RefreshTokenService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i3.EventBusService));\n};\n\nRefreshTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RefreshTokenService,\n  factory: RefreshTokenService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["D:/Workspace/Angular/Item-Trading-App-Angular-Client/src/app/modules/identity/services/refresh-token.service.ts"],"names":["interval","RefreshTokenRequest","Interval","EventData","IdentityService","i0","i1","i2","i3","i4","RefreshTokenService","constructor","http","configService","injector","eventBus","router","eventBusService","options","refresh_path","base_path","InitOptions","initBackgroundEventBusSubscription","ngOnInit","initEventBusSubscription","ngOnDestroy","clearEventBusSubscription","getToken","result","localStorage","getItem","toString","getRefreshToken","getRefreshTokenRequest","request","token","refreshToken","updateToken","setItem","updateRefreshToken","canRefreshTokens","getRefreshTokensRequest","loaded","post","refreshTokens","subscribe","setTokens","err","emit","isLoggedIn","signOut","clear","navigate","eventBusSignOutSub","on","endSilentRefresh","eventBusSilentRefreshSub","startSilentRefresh","unsubscribe","GetOptions","silentRefresh","silentRefreshIntervalInSeconds","loadOptions","LoadEndpoints","WaitUntilIsLoaded","endpointsModel","refresh","ɵfac","RefreshTokenService_Factory","t","ɵɵinject","HttpClient","ConfigService","Injector","EventBusService","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { interval } from 'rxjs';\r\nimport { RefreshTokenRequest } from 'src/app/models/request/identity/refresh-token-request.model';\r\nimport { Interval } from 'src/app/models/utils/async-utils';\r\nimport { EventData } from 'src/app/models/utils/event';\r\nimport { IdentityService } from './identity.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../../shared/services/config.service\";\r\nimport * as i3 from \"../../shared/services/event-bus.service\";\r\nimport * as i4 from \"@angular/router\";\r\nexport class RefreshTokenService extends IdentityService {\r\n    constructor(http, configService, injector, eventBus, router, eventBusService) {\r\n        super(http, configService, injector, eventBus);\r\n        this.http = http;\r\n        this.configService = configService;\r\n        this.injector = injector;\r\n        this.eventBus = eventBus;\r\n        this.router = router;\r\n        this.eventBusService = eventBusService;\r\n        this.options = null;\r\n        this.refresh_path = this.base_path + \"refresh\";\r\n        this.InitOptions();\r\n        this.initBackgroundEventBusSubscription();\r\n    }\r\n    ngOnInit() {\r\n        this.initEventBusSubscription();\r\n    }\r\n    ngOnDestroy() {\r\n        this.clearEventBusSubscription();\r\n    }\r\n    getToken() {\r\n        var result = localStorage.getItem(\"token\");\r\n        return result === null ? \"\" : result.toString();\r\n    }\r\n    getRefreshToken() {\r\n        var result = localStorage.getItem(\"refreshToken\");\r\n        return result === null ? \"\" : result.toString();\r\n    }\r\n    getRefreshTokenRequest() {\r\n        var request = new RefreshTokenRequest();\r\n        request.token = this.getToken();\r\n        request.refreshToken = this.getRefreshToken();\r\n        return request;\r\n    }\r\n    updateToken(token) {\r\n        localStorage.setItem(\"token\", token);\r\n    }\r\n    updateRefreshToken(refreshToken) {\r\n        localStorage.setItem(\"refreshToken\", refreshToken);\r\n    }\r\n    canRefreshTokens() {\r\n        // if we have token and refresh token then it means that we have the necessarily data for token refresh\r\n        return this.getToken() !== \"\" && this.getRefreshToken() !== \"\";\r\n    }\r\n    getRefreshTokensRequest() {\r\n        if (!this.loaded)\r\n            return null; // won't happen if we are not trying to refresh the token in the first milliseconds from creating the component\r\n        return this.http.post(this.refresh_path, this.getRefreshTokenRequest());\r\n    }\r\n    async refreshTokens() {\r\n        if (this.canRefreshTokens()) {\r\n            let result;\r\n            await Interval(() => {\r\n                result = this.getRefreshTokensRequest();\r\n                return result == null; // we will continue until we get a non null result\r\n            }, 100, 4000);\r\n            if (result == null) {\r\n                return;\r\n            }\r\n            result.subscribe(result => {\r\n                this.setTokens(result);\r\n            }, err => {\r\n                this.eventBusService.emit(new EventData(\"logout\", null));\r\n            });\r\n        }\r\n    }\r\n    isLoggedIn() {\r\n        return this.canRefreshTokens();\r\n    }\r\n    signOut() {\r\n        localStorage.clear();\r\n        this.router.navigate(['login']);\r\n    }\r\n    // subscriptions could be triggered even if the service is destroyed\r\n    initBackgroundEventBusSubscription() {\r\n        this.eventBusSignOutSub = this.eventBusService.on('logout', () => {\r\n            this.signOut();\r\n            this.endSilentRefresh();\r\n        });\r\n    }\r\n    initEventBusSubscription() {\r\n        this.eventBusSilentRefreshSub = this.eventBusService.on('silentRefresh', async () => {\r\n            this.startSilentRefresh();\r\n        });\r\n    }\r\n    clearEventBusSubscription() {\r\n        if (this.eventBusSilentRefreshSub) {\r\n            this.eventBusSilentRefreshSub.unsubscribe();\r\n        }\r\n        this.endSilentRefresh();\r\n    }\r\n    async startSilentRefresh() {\r\n        if (this.options == null) {\r\n            await this.GetOptions();\r\n            if (this.options == null) {\r\n                return;\r\n            }\r\n        }\r\n        this.silentRefresh = interval(this.options.silentRefreshIntervalInSeconds * 1000)\r\n            .subscribe(() => {\r\n            this.refreshTokens();\r\n        });\r\n    }\r\n    endSilentRefresh() {\r\n        if (this.silentRefresh) {\r\n            this.silentRefresh.unsubscribe();\r\n        }\r\n    }\r\n    async InitOptions() {\r\n        this.options = await this.configService.loadOptions(\"refreshTokenOptions\");\r\n    }\r\n    async GetOptions() {\r\n        if (this.options == null) {\r\n            await Interval(() => this.options == null, 50, 5000);\r\n        }\r\n        return this.options;\r\n    }\r\n    async LoadEndpoints() {\r\n        await this.WaitUntilIsLoaded();\r\n        if (this.endpointsModel == null)\r\n            return;\r\n        this.refresh_path = this.base_path + this.endpointsModel.refresh;\r\n    }\r\n}\r\nRefreshTokenService.ɵfac = function RefreshTokenService_Factory(t) { return new (t || RefreshTokenService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.EventBusService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i3.EventBusService)); };\r\nRefreshTokenService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RefreshTokenService, factory: RefreshTokenService.ɵfac, providedIn: \"root\" });\r\n"]},"metadata":{},"sourceType":"module"}